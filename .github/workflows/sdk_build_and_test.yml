name: sdk-build-and-test

on:
  push:
    branches: [ "master" ]
    paths:
      - sdk/**
  pull_request:
    branches: [ "master" ]
    paths:
      - sdk/**

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  sdk-build-and-test:
    name: Test pti-sdk on Ubuntu

    #
    # pti is a selector to machines with Intel Ponte Vecchio officially
    # Intel(R) Data Center GPU Max 1100
    #
    runs-on: [pti]

    strategy:
      matrix:
        include:
          - container: ${{ vars.PTI_DOCKER_IMAGE_2024_1_1 }}
            uploadname: "ubuntu22.4-2024.1.1"

    container: 
      image: ${{ matrix.container }}
      options: --device=/dev/dri --cap-add CAP_PERFMON

    if: vars.PTI_RUN_TESTS == 1

    steps:
      - name: Clean-up
        run:  rm -rf *

      - name: Checkout
        uses: actions/checkout@v4

      - name: Build
        working-directory: sdk
        run: |
          source /opt/intel/oneapi/setvars.sh
          cmake --preset default
          cmake --build --preset default -j $(($(nproc)/2))

      - name: Test
        working-directory: sdk
        run: |
          source /opt/intel/oneapi/setvars.sh
          ctest --output-on-failure --preset default

      - name: Build AddressSanitizer
        working-directory: sdk
        run: |
          source /opt/intel/oneapi/setvars.sh
          cmake --preset asan
          cmake --build --preset asan --parallel $(($(nproc)/2))

      - name: Build ThreadSanitizer
        working-directory: sdk
        run: |
          source /opt/intel/oneapi/setvars.sh
          cmake --preset tsan
          cmake --build --preset tsan --parallel $(($(nproc)/2))

      - name: Build libFuzzer
        working-directory: sdk
        run: |
          # To ensure it still builds, run build for fuzz targets until we have
          # proper fuzz testing infrastructure in place.
          source /opt/intel/oneapi/setvars.sh
          cmake --preset fuzz
          cmake --build --preset fuzz --parallel $(($(nproc)/2))

      #
      # Rocky8 has a problem with this test.
      #
      - name: Test AddressSanitizer
        working-directory: sdk
        run: |
          source /opt/intel/oneapi/setvars.sh

          #
          # Must skip Rocky8 with more than one GPU because of
          # an unexpected failure as documented in PTI-74
          #
          if [ $(sycl-ls|grep 'ext_oneapi_level_zero:gpu:' -c) -gt 1 ] &&\
             [[ $(cat /etc/redhat-release)  =~ Rocky.*8 ]]; then
            exit 0
          fi
          ctest --preset asan --output-on-failure -L samples

      - name: Test ThreadSanitizer
        working-directory: sdk
        run: |
          source /opt/intel/oneapi/setvars.sh
          ctest --preset tsan --output-on-failure -L samples

      - name: Install SDK
        working-directory: sdk
        run: |
          source /opt/intel/oneapi/setvars.sh
          cmake --install build --config Release --prefix out

      - name: Upload SDK
        uses: actions/upload-artifact@v4
        with:
          name: "PTI-SDK-${{ matrix.uploadname }}"
          path: sdk/out
