#==============================================================
# Copyright (C) Intel Corporation
#
# SPDX-License-Identifier: MIT
# =============================================================

#!/usr/bin/env python3

import pandas as pd
import matplotlib.pyplot as plt
import os
import argparse

def ParseArguments():
    argparser = argparse.ArgumentParser(description = "GPU Kernel Performance Hardware Metrics Viewer")
    argparser.add_argument('-d', '--device', type = int, default = 0, help = "GPU device (default is device 0)")
    argparser.add_argument('-k', '--kernel', required = True, help = "kernel name with shape")
    argparser.add_argument('-i', '--instance', type = int, default = 1, help = "kernel instance (default is 1, the first instance)")
    argparser.add_argument('-m', '--metrics', help = "list of comma-separated metric names")
    argparser.add_argument('-o', '--output', required = True, help = "output file name with for extension (for example, png, pdf)")
    argparser.add_argument('-y', '--ylabel', help = "label for Y axis")
    argparser.add_argument('-x', '--xlabel', default = "Time", help = "label for X axis (defaut is \"Time\")")
    argparser.add_argument('-t', '--title', default = "Performance Metrics", help = "performance metric plot title")
    argparser.add_argument('input', help = 'Hardware performance metric data file in .csv format generated by unitrace -k/--stall-sampling')
    
    return argparser.parse_args()

def AnalyzeStallMetrics(args, header, last):
    # only read lines from headerlinenumber to lastline
    df = pd.read_csv(args.input, skiprows = header, nrows = last - header - 1, skip_blank_lines = False, skipinitialspace = True)

    counting = True
    start = -1
    stop = -1
    kernelfound = False

    for index, row in df.iterrows():
        if (row['Kernel'] == args.kernel):
            if (kernelfound == False):
                start = index
                kernelfound = True
        else:
            if (kernelfound == True):
                stop = index - 1
                break

    if (kernelfound == False):
        print("No metric data for kernel " + args.kernel)
        return


    df2 = df[start:stop + 1]    # data frame of the kernel of interest
    stalls = ["Active[Events]", "ControlStall[Events]", "PipeStall[Events]", "SendStall[Events]", "DistStall[Events]", "SbidStall[Events]", "SyncStall[Events]", "InstrFetchStall[Events]", "OtherStall[Events]"]
    df3 = df2[stalls]

    ax = df3.plot(y = stalls, kind = 'line', xlabel = "IP[Address]", ylabel = "Events", fontsize = 6)
    ax.set_xticks(df2.index, labels = df2["IP[Address]"], rotation = 90, fontsize = 6)
    plt.grid(visible = True, which = 'both', axis = 'y')
    plt.legend(loc = 'best', fontsize = 4)
    plt.title(label = args.title, loc = 'center', fontsize = 8)
    plt.tight_layout()
    plt.savefig(args.output)
    print("Stall metric chart " + args.output + " has been successfully generated.")
    
def AnalyzePerfMetrics(args, header, last):

    # only read lines from headerlinenumber to lastline
    df = pd.read_csv(args.input, skiprows = header, nrows = last - header - 1, skip_blank_lines = False, skipinitialspace = True)

    metrics = args.metrics.split(sep = ',')
    metrics_cleansed = []
    for metric in metrics:
        me = metric.strip()			# strip off leading and trailing whitespaces
        if (me not in df.columns):
            print("No metric data for " + metric)
            return
        else:
            metrics_cleansed.append(me)

    k = 0
    counting = True
    start = -1
    stop = -1
    instancefound = False
    
    for index, row in df.iterrows():
        if (pd.isna(row['Kernel']) == False):
            if ((row['Kernel'] == args.kernel) and (counting == True)):
                k = k + 1			# found kernel of interest
                counting = False		# set to false so this block will not enter again for this instance
                if (k == args.instance):	# found instance of interest
                    start = index
                    instancefound = True
        else:
            counting = True			# a new kernel and/or a new instance starts in the data frame
            if (instancefound == True):
                stop = index - 1
                break
    if ((instancefound == True) and (stop == -1)):	# the instance of interest is at the end of data frame
        stop = df.shape(0)

    if (instancefound == False):
        print("No metric data for kernel " + args.kernel)
        return
     

    df2 = df[start:stop + 1]	# data frame of the instance of interest
    df3 = df2[metrics_cleansed]

    df3.plot(y = metrics_cleansed, kind = 'line', xlabel = args.xlabel, ylabel = args.ylabel)
    plt.grid(visible = True, which = 'both', axis = 'y')
    plt.legend(loc = 'best', fontsize = 4)
    plt.title(label = args.title, loc = 'center', fontsize = 8)
    plt.tight_layout()
    plt.savefig(args.output)
    print("Performance metric chart " + args.output + " has been successfully generated.")

def main(args):
    if (os.path.isfile(args.input) == False):
        print("File " + args.input + " does not exist or cannot be opened")
        return

    if (os.stat(args.input).st_size ==0):
        print("File " + args.input + " is empty")
        return

    header = 0
    device_banner = "=== Device #" + str(args.device) + " Metrics ==="
    last = 0
    devicefound = False
    eustall = False
    with open(args.input, "r") as f:
        linenum = 0
        counting = False
        for row in f:
            if (("=== Device" in row) and ("Metrics ===" in row)):
                if (device_banner in row):		# found device
                    counting = True
                    devicefound = True
                else:
                    if (devicefound == True):	# done with the device of interest
                        break
            if (counting == True):
                if (("OtherStall[Events]," in row) or (row.startswith("Kernel,"))):      # found header
                    header = linenum
                    counting = False
                    if ("OtherStall[Events]," in row):
                        eustall = True
            linenum += 1

        last = linenum;
                
    if (devicefound == False):
        print("Device " + str(args.device) + " not found in input file")
        return
    
    if (eustall == False):
        if (args.instance < 1):
            print("Kernel instance has to be greater than 0")
            return
        if (args.metrics is None):
            print("-m option is missing")
            return
        if (args.ylabel is None):
            print("-y option is missing")
            return
        AnalyzePerfMetrics(args, header, last)
    else:
        AnalyzeStallMetrics(args, header, last)

if __name__== "__main__":
    main(ParseArguments())
